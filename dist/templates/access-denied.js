/**
 * Access Denied Template - Working Version with Modal
 */
export function generateAccessDeniedHTML() {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Access Denied - Cloudflare Access</title>
</head>
<body>
    <div id="root"></div>
    <script>
        ${getWorkingJavaScript()}
    </script>
</body>
</html>`;
}
function getWorkingJavaScript() {
    return [
        '// Access Denied Page JavaScript with Modal',
        '',
        '// Global variables for modal',
        'window.allGroups = [];',
        "window.targetGroup = '';",
        '',
        'function createAccessDeniedPage() {',
        "  const root = document.getElementById('root');",
        '  const htmlContent = [',
        "    '<div style=\"min-height: 100vh; background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); font-family: Inter, -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica Neue, Helvetica, Arial, sans-serif; line-height: 1.6;\">',",
        "    '<div style=\"max-width: 1200px; margin: 0 auto; padding: 32px 24px;\">',",
        "    '<div style=\"text-align: center; margin-bottom: 48px;\">',",
        "    '<h1 style=\"font-size: 32px; line-height: 1.25; color: #0f172a; margin-bottom: 16px; font-weight: 700; letter-spacing: -0.025em;\">Access Denied</h1>',",
        "    '<p style=\"font-size: 16px; line-height: 1.6; color: #64748b; max-width: 560px; margin: 0 auto;\">You do not have permission to access this resource. Here is information about your current session and device status.</p>',",
        "    '</div>',",
        "    '<div id=\"loading-message\" style=\"text-align: center; padding: 48px 24px;\">',",
        "    '<div style=\"display: inline-block; width: 40px; height: 40px; border: 3px solid #e2e8f0; border-radius: 50%; border-top-color: #3b82f6; animation: spin 800ms ease-in-out infinite;\"></div>',",
        "    '<p style=\"margin-top: 24px; color: #64748b; font-size: 14px; line-height: 1.5;\">Loading your identity and device information...</p>',",
        "    '</div>',",
        "    '<div id=\"content\" style=\"display: none;\">',",
        "    '<div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 24px; margin-bottom: 32px;\">',",
        "    '<div id=\"user-info\" class=\"card-interactive\" style=\"background: #ffffff; border-radius: 8px; padding: 24px; box-shadow: 0 1px 3px rgba(15, 23, 42, 0.1); border: 1px solid #e2e8f0;\" tabindex=\"0\" role=\"button\" aria-label=\"Click to copy User Information\"></div>',",
        "    '<div id=\"device-info\" class=\"card-interactive\" style=\"background: #ffffff; border-radius: 8px; padding: 24px; box-shadow: 0 1px 3px rgba(15, 23, 42, 0.1); border: 1px solid #e2e8f0;\" tabindex=\"0\" role=\"button\" aria-label=\"Click to copy Device Information\"></div>',",
        "    '<div id=\"warp-info\" class=\"card-interactive\" style=\"background: #ffffff; border-radius: 8px; padding: 24px; box-shadow: 0 1px 3px rgba(15, 23, 42, 0.1); border: 1px solid #e2e8f0;\" tabindex=\"0\" role=\"button\" aria-label=\"Click to copy WARP Status Information\"></div>',",
        "    '<div id=\"network-info\" class=\"card-interactive\" style=\"background: #ffffff; border-radius: 8px; padding: 24px; box-shadow: 0 1px 3px rgba(15, 23, 42, 0.1); border: 1px solid #e2e8f0;\" tabindex=\"0\" role=\"button\" aria-label=\"Click to copy Network Information\"></div>',",
        "    '<div id=\"posture-info\" class=\"card-interactive\" style=\"background: #ffffff; border-radius: 8px; padding: 24px; box-shadow: 0 1px 3px rgba(15, 23, 42, 0.1); border: 1px solid #e2e8f0;\" tabindex=\"0\" role=\"button\" aria-label=\"Click to copy Device Compliance Information\"></div>',",
        "    '<div id=\"group-info\" class=\"card-interactive\" style=\"background: #ffffff; border-radius: 8px; padding: 24px; box-shadow: 0 1px 3px rgba(15, 23, 42, 0.1); border: 1px solid #e2e8f0;\" tabindex=\"0\" role=\"button\" aria-label=\"Click to copy Group Membership Information\"></div>',",
        "    '</div>',",
        "    '<div style=\"background: #ffffff; border-radius: 8px; padding: 24px; box-shadow: 0 1px 3px rgba(15, 23, 42, 0.1); border: 1px solid #e2e8f0;\">',",
        "    '<h3 style=\"color: #0f172a; margin-bottom: 16px; font-size: 18px; font-weight: 600; line-height: 1.4;\">Recent Access Attempts</h3>',",
        "    '<div id=\"history-info\"></div>',",
        "    '</div>',",
        "    '</div>',",
        "    '</div>',",
        "    '</div>',",
        "    '<!-- Group Modal -->',",
        "    '<div id=\"group-modal\" style=\"position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.5); display: none; justify-content: center; align-items: center; z-index: 1000; font-family: Inter, -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica Neue, Helvetica, Arial, sans-serif;\">',",
        "    '  <div style=\"background: white; border-radius: 12px; padding: 24px; margin: 16px; max-width: 500px; width: 100%; max-height: 80vh; overflow-y: auto; box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1); font-family: inherit;\">',",
        "    '    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding-bottom: 16px; border-bottom: 1px solid #e5e7eb;\">',",
        "    '      <h2 style=\"font-size: 20px; font-weight: 600; color: #0f172a; margin: 0;\">üë• All Group Memberships</h2>',",
        "    '      <button onclick=\"closeGroupModal()\" style=\"background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280; padding: 0; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; border-radius: 4px;\">&times;</button>',",
        "    '    </div>',",
        "    '    <div id=\"modal-group-list\">',",
        "    '      <!-- Groups will be populated here -->',",
        "    '    </div>',",
        "    '  </div>',",
        "    '</div>',",
        "    '<!-- Compliance Modal -->',",
        "    '<div id=\"compliance-modal\" style=\"position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.5); display: none; justify-content: center; align-items: center; z-index: 1000; font-family: Inter, -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica Neue, Helvetica, Arial, sans-serif;\">',",
        "    '  <div style=\"background: white; border-radius: 12px; padding: 24px; margin: 16px; max-width: 500px; width: 100%; max-height: 80vh; overflow-y: auto; box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1); font-family: inherit;\">',",
        "    '    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding-bottom: 16px; border-bottom: 1px solid #e5e7eb;\">',",
        "    '      <h2 style=\"font-size: 20px; font-weight: 600; color: #0f172a; margin: 0;\">‚öñÔ∏è All Device Compliance Checks</h2>',",
        "    '      <button onclick=\"closeComplianceModal()\" style=\"background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280; padding: 0; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; border-radius: 4px;\">&times;</button>',",
        "    '    </div>',",
        "    '    <div id=\"modal-compliance-list\">',",
        "    '      <!-- Compliance checks will be populated here -->',",
        "    '    </div>',",
        "    '  </div>',",
        "    '</div>',",
        "    '<style>',",
        "    '@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }',",
        "    '',",
        "    '/* S-Tier Interactive Cards */',",
        "    '.card-interactive {',",
        "    '  cursor: pointer;',",
        "    '  transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);',",
        "    '  border: 1px solid #e2e8f0;',",
        "    '  transform: translateZ(0);',",
        "    '  will-change: transform, box-shadow, border-color;',",
        "    '}',",
        "    '',",
        "    '.card-interactive:hover {',",
        "    '  transform: translateY(-4px);',",
        "    '  box-shadow: 0 12px 24px rgba(15, 23, 42, 0.15);',",
        "    '  border-color: #3b82f6;',",
        "    '}',",
        "    '',",
        "    '.card-interactive:focus {',",
        "    '  outline: 2px solid #3b82f6;',",
        "    '  outline-offset: 2px;',",
        "    '  transform: translateY(-4px);',",
        "    '  box-shadow: 0 12px 24px rgba(15, 23, 42, 0.15);',",
        "    '}',",
        "    '',",
        "    '.status-badge:hover {',",
        "    '  transform: scale(1.05);',",
        "    '  filter: brightness(1.1);',",
        "    '  transition: all 0.2s ease;',",
        "    '}',",
        "    '',",
        "    '/* Copy Tooltip */',",
        "    '.copy-tooltip {',",
        "    '  position: absolute;',",
        "    '  background: #1f2937;',",
        "    '  color: white;',",
        "    '  padding: 6px 12px;',",
        "    '  border-radius: 6px;',",
        "    '  font-size: 12px;',",
        "    '  font-weight: 500;',",
        "    '  font-family: Inter, -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica Neue, Helvetica, Arial, sans-serif;',",
        "    '  z-index: 10000;',",
        "    '  opacity: 0;',",
        "    '  animation: fadeInOut 2s ease-in-out;',",
        "    '  pointer-events: none;',",
        "    '}',",
        "    '',",
        "    '@keyframes fadeInOut {',",
        "    '  0% { opacity: 0; transform: translateY(10px); }',",
        "    '  20% { opacity: 1; transform: translateY(0); }',",
        "    '  80% { opacity: 1; transform: translateY(0); }',",
        "    '  100% { opacity: 0; transform: translateY(-10px); }',",
        "    '}',",
        "    '</style>'",
        '  ];',
        "  root.innerHTML = htmlContent.join('');",
        '}',
        '',
        '// S-Tier Interactive Effects and Copy Functionality',
        'function addInteractiveEffects() {',
        "  const cards = document.querySelectorAll('.card-interactive');",
        '  ',
        '  cards.forEach(card => {',
        '    // Click to copy functionality',
        "    card.addEventListener('click', function(event) {",
        '      // Prevent copy if clicking on interactive elements like buttons or elements with onclick',
        "      if (event.target.tagName.toLowerCase() === 'button' || ",
        '          event.target.onclick ||',
        "          event.target.getAttribute('onclick') ||",
        "          event.target.closest('[onclick]')) {",
        '        return;',
        '      }',
        '      copyCardData(card);',
        '    });',
        '    ',
        '    // Keyboard navigation',
        "    card.addEventListener('keydown', function(event) {",
        "      if (event.key === 'Enter' || event.key === ' ') {",
        '        event.preventDefault();',
        '        copyCardData(card);',
        '      }',
        '    });',
        '  });',
        '}',
        '',
        '// Extract and format card data for clipboard',
        'function copyCardData(card) {',
        '  const cardId = card.id;',
        "  let textToCopy = '';",
        '  ',
        '  try {',
        '    switch(cardId) {',
        "      case 'user-info':",
        '        textToCopy = extractUserInfo();',
        '        break;',
        "      case 'device-info':",
        '        textToCopy = extractDeviceInfo();',
        '        break;',
        "      case 'warp-info':",
        '        textToCopy = extractWarpInfo();',
        '        break;',
        "      case 'network-info':",
        '        textToCopy = extractNetworkInfo();',
        '        break;',
        "      case 'posture-info':",
        '        textToCopy = extractPostureInfo();',
        '        break;',
        "      case 'group-info':",
        '        textToCopy = extractGroupInfo();',
        '        break;',
        '      default:',
        "        textToCopy = card.textContent || 'No data available';",
        '    }',
        '    ',
        '    // Copy to clipboard - only use S-Tier tooltip feedback',
        '    if (navigator.clipboard && navigator.clipboard.writeText) {',
        '      navigator.clipboard.writeText(textToCopy).then(() => {',
        "        showCopyFeedback(card, 'Copied!');",
        '      }).catch(err => {',
        '        fallbackCopyTextToClipboard(textToCopy);',
        "        showCopyFeedback(card, 'Copied!');",
        '      });',
        '    } else {',
        '      fallbackCopyTextToClipboard(textToCopy);',
        "      showCopyFeedback(card, 'Copied!');",
        '    }',
        '  } catch (error) {',
        "    showCopyFeedback(card, 'Copy failed');",
        '  }',
        '}',
        '',
        '// Fallback copy method for older browsers',
        'function fallbackCopyTextToClipboard(text) {',
        "  const textArea = document.createElement('textarea');",
        '  textArea.value = text;',
        "  textArea.style.position = 'fixed';",
        "  textArea.style.left = '-999999px';",
        "  textArea.style.top = '-999999px';",
        '  document.body.appendChild(textArea);',
        '  textArea.focus();',
        '  textArea.select();',
        '  try {',
        "    document.execCommand('copy');",
        '  } catch (err) {',
        '    // Fallback copy failed',
        '  }',
        '  document.body.removeChild(textArea);',
        '}',
        '',
        '// Show copy feedback with smooth animation',
        'function showCopyFeedback(element, message) {',
        '  const rect = element.getBoundingClientRect();',
        "  const tooltip = document.createElement('div');",
        "  tooltip.className = 'copy-tooltip';",
        '  tooltip.textContent = message;',
        '  ',
        '  // Position tooltip above the card',
        "  tooltip.style.left = (rect.left + rect.width / 2) + 'px';",
        "  tooltip.style.top = (rect.top - 40) + 'px';",
        "  tooltip.style.transform = 'translateX(-50%)';",
        '  ',
        '  document.body.appendChild(tooltip);',
        '  ',
        '  // Remove tooltip after animation',
        '  setTimeout(() => {',
        '    if (tooltip.parentNode) {',
        '      document.body.removeChild(tooltip);',
        '    }',
        '  }, 2000);',
        '}',
        '',
        '// Data extraction functions',
        'function extractUserInfo() {',
        '  const identity = window.userData?.identity;',
        '  const envData = window.envData || {};',
        "  const email = identity?.email || 'Not available';",
        "  const username = identity?.custom?.username || identity?.preferred_username || identity?.username || identity?.sub || identity?.email || 'Not available';",
        "  const name = identity?.name || 'Not available';",
        '  // Enhanced IDP display with API lookup',
        "  let idpUsed = 'Not available';",
        '  if (identity?.idp) {',
        "    const idpType = identity.idp.type || '';",
        '    const cachedIdpDetails = window.idpDetails;',
        '    ',
        '    if (cachedIdpDetails && cachedIdpDetails.name) {',
        '      idpUsed = idpType ? `${cachedIdpDetails.name} - ${idpType.toUpperCase()}` : cachedIdpDetails.name;',
        '    } else if (idpType) {',
        '      idpUsed = idpType.toUpperCase();',
        '    }',
        '  }',
        '  ',
        "  const organization = envData.ORGANIZATION_NAME || 'Not available';",
        '  return `User Information:\\nName: ${name}\\nEmail: ${email}\\nUsername: ${username}\\nIDP Used: ${idpUsed}\\nOrganization: ${organization}`;',
        '}',
        '',
        'function extractDeviceInfo() {',
        '  const identity = window.userData?.identity;',
        '  const device = window.userData?.device;',
        "  const deviceModel = device?.model || identity?.device_sessions?.[0]?.device_model || 'Not available';",
        "  const deviceName = device?.name || identity?.device_sessions?.[0]?.device_name || 'Not available';",
        "  const osVersion = device?.os_version || identity?.device_sessions?.[0]?.os_version || 'Not available';",
        "  const version = device?.version || 'Not available';",
        '  ',
        '  return `Device Information:\\nModel: ${deviceModel}\\nName: ${deviceName}\\nOS Version: ${osVersion}\\nVersion: ${version}`;',
        '}',
        '',
        'function extractWarpInfo() {',
        '  const identity = window.userData?.identity;',
        "  const warpStatus = identity?.is_warp ? 'Connected' : 'Disconnected';",
        "  const gatewayStatus = identity?.is_gateway ? 'Active' : 'Inactive';",
        '  ',
        '  return `WARP Status:\\nConnection: ${warpStatus}\\nGateway: ${gatewayStatus}`;',
        '}',
        '',
        'function extractNetworkInfo() {',
        '  const network = window.networkData;',
        "  if (!network) return 'Network Information:\\nNo network data available';",
        '  ',
        "  const ip = network.ip || 'Not available';",
        "  const city = network.city || 'Not available';",
        "  const country = network.country || 'Not available';",
        "  const region = network.region || 'Not available';",
        "  const isp = network.isp || 'Not available';",
        "  const userAgent = network.userAgent || 'Not available';",
        "  const edgeLocation = network.colo || 'Not available';",
        '  ',
        '  return `Network Information:\\nPublic IP: ${ip}\\nLocation: ${city}, ${country}\\nRegion: ${region}\\nISP: ${isp}\\nBrowser: ${userAgent}\\nEdge Location: ${edgeLocation}`;',
        '}',
        '',
        'function extractPostureInfo() {',
        '  // Use the globally stored filtered compliance checks (same as displayed + hidden)',
        '  const filteredPosture = window.allComplianceChecks || [];',
        "  if (filteredPosture.length === 0) return 'Device Compliance:\\nNo compliance data available';",
        '  ',
        "  let postureText = 'Device Compliance:\\n';",
        '  filteredPosture.forEach(rule => {',
        '    // Use the same naming logic as in the display function',
        "    let displayName = rule.rule_name || rule.name || (rule.type ? rule.type.replace(/_/g, ' ').replace(/\\\\b\\\\w/g, l => l.toUpperCase()) : 'Unknown Check');",
        "    let requirement = '';",
        '    ',
        '    if (rule.input) {',
        '      if (rule.input.min_value) {',
        "        requirement = ' (>= ' + rule.input.min_value + ')';",
        '      } else if (rule.input.max_value) {',
        "        requirement = ' (<= ' + rule.input.max_value + ')';",
        '      } else if (rule.input.version) {',
        "        requirement = ' (' + rule.input.version + ')';",
        '      }',
        '    }',
        '    ',
        '    // Handle different rule types with better naming',
        "    if (rule.type === 'os_version') {",
        '      if (!rule.rule_name && rule.input && rule.input.version) {',
        "        if (rule.input.version.includes('18.4.1')) {",
        "          displayName = 'Latest version of iOS';",
        "        } else if (rule.input.version.includes('6.8.0')) {",
        "          displayName = 'Latest version of Linux Kernel';",
        "        } else if (rule.input.version.includes('10.0.26100')) {",
        "          displayName = 'Latest version of Windows';",
        "        } else if (rule.input.version.includes('15.6.1')) {",
        "          displayName = 'macOS Version Rule';",
        '        }',
        '      }',
        "    } else if (rule.type === 'disk_encryption') {",
        "      displayName = rule.rule_name || 'Disk Encryption macOS';",
        "    } else if (rule.type === 'application') {",
        "      displayName = rule.rule_name || 'Application Check';",
        "    } else if (rule.type === 'firewall') {",
        "      displayName = rule.rule_name || 'Firewall rule macOS';",
        '    }',
        '    ',
        '    const fullDisplayName = displayName + requirement;',
        "    const success = rule.success ? 'Compliant' : 'Non-Compliant';",
        "    postureText += fullDisplayName + ': ' + success + '\\n';",
        '  });',
        '  ',
        '  return postureText.trim();',
        '}',
        '',
        'function extractGroupInfo() {',
        '  const groups = window.allGroups;',
        '  const targetGroup = window.targetGroup;',
        "  if (!groups || !Array.isArray(groups)) return 'Group Membership:\\nNo group information available';",
        '  ',
        "  let groupText = 'Group Membership:\\n';",
        '  groups.forEach(group => {',
        "    const status = group === targetGroup ? 'Primary Group' : 'Member';",
        '    groupText += `${group}: ${status}\\n`;',
        '  });',
        '  ',
        '  return groupText.trim();',
        '}',
        '',
        '// Load data from APIs',
        'async function loadUserData() {',
        '  try {',
        '    const [userResponse, historyResponse, envResponse, networkResponse] = await Promise.all([',
        "      fetch('/api/userdetails').catch(() => null),",
        "      fetch('/api/history').catch(() => null),",
        "      fetch('/api/env').catch(() => null),",
        "      fetch('/api/networkinfo').catch(() => null)",
        '    ]);',
        '',
        '    const userData = userResponse ? await userResponse.json() : null;',
        '    const historyData = historyResponse ? await historyResponse.json() : null;',
        '    const envData = envResponse ? await envResponse.json() : null;',
        '    const networkData = networkResponse ? await networkResponse.json() : null;',
        '',
        '    // Fetch IDP details if available',
        '    let idpDetails = null;',
        '    if (userData?.identity?.idp?.id) {',
        '      try {',
        '        const idpResponse = await fetch(`/api/idpdetails?id=${userData.identity.idp.id}`);',
        '        if (idpResponse.ok) {',
        '          idpDetails = await idpResponse.json();',
        '        }',
        '      } catch (error) {',
        '        // Could not fetch IDP details',
        '      }',
        '    }',
        '',
        '    // Store data globally for copy functions',
        '    window.userData = userData;',
        '    window.envData = envData;',
        '    window.networkData = networkData;',
        '    window.idpDetails = idpDetails;',
        '',
        '    displayUserInfo(userData, envData);',
        '    displayDeviceInfo(userData);',
        '    displayWarpInfo(userData, envData);',
        '    displayNetworkInfo(networkData);',
        '    displayPostureInfo(userData);',
        '    displayGroupInfo(userData, envData);',
        '    displayHistory(historyData);',
        '',
        "    document.getElementById('loading-message').style.display = 'none';",
        "    document.getElementById('content').style.display = 'block';",
        '    ',
        '    // Add S-Tier interactive effects after content is loaded',
        '    setTimeout(() => addInteractiveEffects(), 100);',
        '  } catch (error) {',
        "    document.getElementById('loading-message').innerHTML = '<div style=\"color: #dc2626; text-align: center; padding: 24px;\"><h3 style=\"font-size: 18px; font-weight: 600; margin-bottom: 8px;\">Loading Error</h3><p style=\"color: #6b7280; font-size: 14px;\">Failed to load information.</p></div>';",
        '  }',
        '}',
        '',
        'function displayUserInfo(userData, envData) {',
        "  const userInfoEl = document.getElementById('user-info');",
        '  const identity = userData?.identity;',
        '  ',
        '  // Try to get username from various possible fields',
        '  let username = null;',
        '  ',
        '  // Check all possible username fields in order of preference',
        '  // 1. Check custom attributes (Cloudflare Access custom fields)',
        '  username = username || identity?.custom?.username;',
        '  ',
        '  // 2. Check SAML attributes',
        '  if (!username && identity?.saml_attributes) {',
        '    // SAML attributes can be arrays or strings, handle both',
        '    const samlAttrs = identity.saml_attributes;',
        '    username = username || (Array.isArray(samlAttrs.username) ? samlAttrs.username[0] : samlAttrs.username);',
        '    username = username || (Array.isArray(samlAttrs.Username) ? samlAttrs.Username[0] : samlAttrs.Username);',
        '    username = username || (Array.isArray(samlAttrs.uid) ? samlAttrs.uid[0] : samlAttrs.uid);',
        '    username = username || (Array.isArray(samlAttrs.sAMAccountName) ? samlAttrs.sAMAccountName[0] : samlAttrs.sAMAccountName);',
        '  }',
        '  ',
        '  // 3. Fallback to standard JWT fields',
        '  username = username || identity?.preferred_username || identity?.username || identity?.sub;',
        '  ',
        '  // Final fallback - use full email as username',
        '  if (!username && identity?.email) {',
        '    username = identity.email;',
        '  }',
        '  ',
        "  let userHtml = '<h3 style=\"color: #0f172a; margin-bottom: 16px; font-size: 18px; font-weight: 600;\">üë§ User Information</h3>';",
        "  userHtml += '<div onclick=\"copyUserInfo()\" style=\"display: flex; flex-direction: column; gap: 12px;\">';",
        "  userHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">Name:</span> <span style=\"color: #6b7280;\">' + (identity?.name || 'Not available') + '</span></div>';",
        "  userHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">Email:</span> <span style=\"color: #6b7280;\">' + (identity?.email || 'Not available') + '</span></div>';",
        "  userHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">Username:</span> <span style=\"color: #6b7280;\">' + (username || 'Not available') + '</span></div>';",
        '  ',
        '  // Enhanced IDP display logic with API lookup',
        "  let idpUsed = 'Not available';",
        '  if (identity?.idp) {',
        "    const idpType = identity.idp.type || '';",
        "    const idpId = identity.idp.id || '';",
        '    ',
        '    // Try to get cached IDP details from window storage',
        '    const cachedIdpDetails = window.idpDetails;',
        '    if (cachedIdpDetails && cachedIdpDetails.name) {',
        '      idpUsed = idpType ? `${cachedIdpDetails.name} - ${idpType.toUpperCase()}` : cachedIdpDetails.name;',
        '    } else if (idpType) {',
        '      idpUsed = idpType.toUpperCase();',
        '    }',
        '  }',
        '  ',
        "  userHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">IDP Used:</span> <span style=\"color: #6b7280;\">' + idpUsed + '</span></div>';",
        "  userHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0;\"><span style=\"font-weight: 500; color: #374151;\">Organization:</span> <span style=\"color: #6b7280;\">' + (envData?.ORGANIZATION_NAME || 'Not available') + '</span></div>';",
        "  userHtml += '</div>';",
        '  ',
        '  userInfoEl.innerHTML = userHtml;',
        '}',
        '',
        'function displayDeviceInfo(userData) {',
        "  const deviceInfoEl = document.getElementById('device-info');",
        '  const device = userData?.device?.result;',
        '  const osDisplayName = detectCurrentOS(userData);',
        '  ',
        "  let deviceHtml = '<h3 style=\"color: #0f172a; margin-bottom: 16px; font-size: 18px; font-weight: 600;\">üíª Device Information</h3>';",
        "  deviceHtml += '<div onclick=\"copyDeviceInfo()\" style=\"display: flex; flex-direction: column; gap: 12px;\">';",
        "  deviceHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">Model:</span> <span style=\"color: #6b7280;\">' + (device?.model || 'Not available') + '</span></div>';",
        "  deviceHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">Name:</span> <span style=\"color: #6b7280;\">' + (device?.name || 'Not available') + '</span></div>';",
        "  deviceHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">OS:</span> <span style=\"color: #6b7280;\">' + osDisplayName + '</span></div>';",
        "  deviceHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0;\"><span style=\"font-weight: 500; color: #374151;\">Version:</span> <span style=\"color: #6b7280;\">' + (device?.os_version || 'Not available') + '</span></div>';",
        "  deviceHtml += '</div>';",
        '  ',
        '  deviceInfoEl.innerHTML = deviceHtml;',
        '}',
        '',
        'function displayWarpInfo(userData, envData) {',
        "  const warpInfoEl = document.getElementById('warp-info');",
        '  const identity = userData?.identity;',
        "  const warpStatus = identity?.is_warp ? { text: 'Connected', color: '#059669', bg: '#d1fae5' } : { text: 'Disconnected', color: '#dc2626', bg: '#fee2e2' };",
        "  const gatewayStatus = identity?.is_gateway ? { text: 'Active', color: '#059669', bg: '#d1fae5' } : { text: 'Inactive', color: '#6b7280', bg: '#f3f4f6' };",
        '  ',
        "  let warpHtml = '<h3 style=\"color: #0f172a; margin-bottom: 16px; font-size: 18px; font-weight: 600;\">üîí WARP Status</h3>';",
        "  warpHtml += '<div onclick=\"copyWarpInfo()\" style=\"display: flex; flex-direction: column; gap: 12px;\">';",
        "  warpHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">Connection:</span><span class=\"status-badge\" style=\"background: ' + warpStatus.bg + '; color: ' + warpStatus.color + '; padding: 2px 8px; border-radius: 4px; font-size: 12px; font-weight: 600;\">' + warpStatus.text + '</span></div>';",
        "  warpHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0;\"><span style=\"font-weight: 500; color: #374151;\">Gateway:</span><span class=\"status-badge\" style=\"background: ' + gatewayStatus.bg + '; color: ' + gatewayStatus.color + '; padding: 2px 8px; border-radius: 4px; font-size: 12px; font-weight: 600;\">' + gatewayStatus.text + '</span></div>';",
        "  warpHtml += '</div>';",
        '  ',
        '  warpInfoEl.innerHTML = warpHtml;',
        '}',
        '',
        'function displayNetworkInfo(networkData) {',
        "  const networkInfoEl = document.getElementById('network-info');",
        '  if (!networkData) {',
        "    networkInfoEl.innerHTML = '<h3 style=\"color: #0f172a; margin-bottom: 16px; font-size: 18px; font-weight: 600;\">üåê Network Information</h3><p style=\"color: #6b7280; font-style: italic;\">Network information not available</p>';",
        '    return;',
        '  }',
        '  ',
        "  const location = (networkData.city && networkData.country) ? networkData.city + ', ' + networkData.country : 'Not available';",
        '  ',
        "  let networkHtml = '<h3 style=\"color: #0f172a; margin-bottom: 16px; font-size: 18px; font-weight: 600;\">üåê Network Information</h3>';",
        "  networkHtml += '<div onclick=\"copyNetworkInfo()\" style=\"display: flex; flex-direction: column; gap: 12px;\">';",
        "  networkHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">IP Address:</span> <span style=\"color: #6b7280;\">' + (networkData.ip || 'Not available') + '</span></div>';",
        "  networkHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">Location:</span> <span style=\"color: #6b7280;\">' + location + '</span></div>';",
        "  networkHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">ISP:</span> <span style=\"color: #6b7280;\">' + (networkData.isp || 'Not available') + '</span></div>';",
        "  networkHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f1f5f9;\"><span style=\"font-weight: 500; color: #374151;\">Browser:</span> <span style=\"color: #6b7280;\">' + (networkData.browser || 'Not available') + '</span></div>';",
        "  networkHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0;\"><span style=\"font-weight: 500; color: #374151;\">Edge Location:</span> <span style=\"color: #6b7280;\">' + (networkData.edgeLocation || 'Not available') + '</span></div>';",
        "  networkHtml += '</div>';",
        '  ',
        '  networkInfoEl.innerHTML = networkHtml;',
        '}',
        '',
        'function displayPostureInfo(userData) {',
        "  const postureInfoEl = document.getElementById('posture-info');",
        '  let posture = userData?.posture?.result || userData?.posture;',
        "  let postureArray = Array.isArray(posture) ? posture : (posture ? Object.values(posture).filter(check => check && typeof check === 'object') : []);",
        '  ',
        '  // Filter posture checks based on current OS',
        '  const currentOS = detectCurrentOS(userData);',
        '  const filteredPosture = filterRelevantPostureChecks(postureArray, currentOS);',
        '  ',
        '  // Store all filtered compliance checks globally for modal and copy functionality',
        '  window.allComplianceChecks = filteredPosture;',
        '  ',
        '  if (filteredPosture.length > 0) {',
        '    const passCount = filteredPosture.filter(rule => rule.success).length;',
        '    const totalCount = filteredPosture.length;',
        "    const overallStatus = passCount === totalCount ? 'Compliant' : 'Non-compliant';",
        "    const overallColor = passCount === totalCount ? '#059669' : '#dc2626';",
        "    const overallBg = passCount === totalCount ? '#d1fae5' : '#fee2e2';",
        '    ',
        "    let statusHtml = '<div style=\"margin-bottom: 16px;\"><div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;\"><span style=\"font-weight: 600; color: #374151;\">Overall Status:</span><span class=\"status-badge\" style=\"background: ' + overallBg + '; color: ' + overallColor + '; padding: 4px 12px; border-radius: 6px; font-size: 14px; font-weight: 600;\">' + overallStatus + '</span></div><div style=\"color: #6b7280; font-size: 14px; margin-bottom: 16px;\">' + passCount + ' of ' + totalCount + ' security checks passed</div></div>';",
        "    statusHtml += '<div style=\"display: flex; flex-direction: column; gap: 12px;\">';",
        '    ',
        '    // Show only first 6 compliance checks',
        '    filteredPosture.slice(0, 6).forEach((rule, index) => {',
        "      const status = rule.success ? { text: 'Compliant', color: '#059669', bg: '#d1fae5' } : { text: 'Non-compliant', color: '#dc2626', bg: '#fee2e2' };",
        '      ',
        '      // Create descriptive names based on available data',
        "      let displayName = rule.type || 'Security Check';",
        "      let requirement = '';",
        '      ',
        '      // Use rule_name if available (most descriptive)',
        '      if (rule.rule_name) {',
        '        displayName = rule.rule_name;',
        '      }',
        '      ',
        '      // Add version/operator requirements where available',
        '      if (rule.input) {',
        '        if (rule.input.version && rule.input.operator) {',
        "          requirement = ' (' + rule.input.operator + ' ' + rule.input.version + ')';",
        '        } else if (rule.input.version) {',
        "          requirement = ' (' + rule.input.version + ')';",
        '        }',
        '      }',
        '      ',
        '      // Handle different rule types with better naming',
        "      if (rule.type === 'os_version') {",
        '        if (!rule.rule_name && rule.input && rule.input.version) {',
        "          if (rule.input.version.includes('18.4.1')) {",
        "            displayName = 'Latest version of iOS';",
        "          } else if (rule.input.version.includes('6.8.0')) {",
        "            displayName = 'Latest version of Linux Kernel';",
        "          } else if (rule.input.version.includes('10.0.26100')) {",
        "            displayName = 'Latest version of Windows';",
        "          } else if (rule.input.version.includes('15.6.1')) {",
        "            displayName = 'macOS Version Rule';",
        '          }',
        '        }',
        "      } else if (rule.type === 'disk_encryption') {",
        "        displayName = rule.rule_name || 'Disk Encryption macOS';",
        "      } else if (rule.type === 'application') {",
        "        displayName = rule.rule_name || 'Application Check';",
        "      } else if (rule.type === 'firewall') {",
        "        displayName = rule.rule_name || 'Firewall rule macOS';",
        '      }',
        '      ',
        '      const fullDisplayName = displayName + requirement;',
        '      const isLast = index === Math.min(filteredPosture.length, 6) - 1 && filteredPosture.length <= 6;',
        "      const separator = !isLast ? ' border-bottom: 1px solid #f1f5f9;' : '';",
        "      statusHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0;' + separator + '\"><span style=\"font-weight: 500; color: #374151;\">' + fullDisplayName + ':</span><span class=\"status-badge\" style=\"background: ' + status.bg + '; color: ' + status.color + '; padding: 2px 8px; border-radius: 4px; font-size: 12px; font-weight: 600;\">' + status.text + '</span></div>';",
        '    });',
        '    ',
        '    // Add "..." button if there are more than 6 compliance checks',
        '    if (filteredPosture.length > 6) {',
        "      statusHtml += '<div onclick=\"showComplianceModal(); event.stopPropagation();\" style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; cursor: pointer;\"><span style=\"font-weight: 500; color: #6b7280; font-style: italic;\">+' + (filteredPosture.length - 6) + ' more compliance checks</span><span class=\"status-badge\" style=\"background: #f3f4f6; color: #6b7280; padding: 2px 8px; border-radius: 4px; font-size: 12px; font-weight: 600;\">...</span></div>';",
        '    }',
        '    ',
        "    statusHtml += '</div>';",
        "    postureInfoEl.innerHTML = '<h3 style=\"color: #0f172a; margin-bottom: 16px; font-size: 18px; font-weight: 600;\">‚öñÔ∏è Device Compliance</h3>' + statusHtml;",
        '  } else {',
        "    postureInfoEl.innerHTML = '<h3 style=\"color: #0f172a; margin-bottom: 16px; font-size: 18px; font-weight: 600;\">‚öñÔ∏è Device Compliance</h3><div style=\"color: #6b7280; text-align: center; padding: 24px;\">No compliance information available</div>';",
        '  }',
        '}',
        '',
        'function displayHistory(historyData) {',
        "  const historyInfoEl = document.getElementById('history-info');",
        '  const loginHistory = historyData?.loginHistory;',
        '  if (!loginHistory || loginHistory.length === 0) {',
        "    historyInfoEl.innerHTML = '<p style=\"color: #6b7280; font-style: italic; text-align: center; padding: 24px 0;\">No recent failed access attempts found.</p>';",
        '    return;',
        '  }',
        "  let historyHtml = '';",
        '  loginHistory.forEach((event, index) => {',
        '    const timestamp = new Date(event.dimensions.datetime).toLocaleString();',
        '    const isLast = index === loginHistory.length - 1;',
        "    historyHtml += '<div style=\"padding: 16px 0; ' + (!isLast ? 'border-bottom: 1px solid #e2e8f0;' : '') + '\"><div style=\"display: flex; justify-content: space-between; align-items: flex-start; gap: 16px;\"><div style=\"flex: 1;\"><div style=\"font-weight: 600; color: #0f172a; margin-bottom: 8px;\">' + (event.applicationName || 'Unknown Application') + '</div><div style=\"color: #6b7280; font-size: 14px; line-height: 1.4;\"><div>' + timestamp + '</div><div style=\"margin-top: 4px;\">IP: ' + (event.dimensions.ipAddress || 'Unknown') + ' ‚Ä¢ ' + (event.dimensions.country || 'Unknown') + '</div></div></div><span class=\"status-badge\" style=\"background: #fee2e2; color: #dc2626; padding: 4px 12px; border-radius: 6px; font-size: 12px; font-weight: 600; flex-shrink: 0;\">FAILED</span></div></div>';",
        '  });',
        '  historyInfoEl.innerHTML = historyHtml;',
        '}',
        '',
        'function detectCurrentOS(userData) {',
        '  const device = userData?.device?.result;',
        "  if (!device) return 'Unknown';",
        '  ',
        "  const model = device.model ? device.model.toLowerCase() : '';",
        "  const osVersion = device.os_version ? device.os_version.toLowerCase() : '';",
        '  ',
        '  // Enhanced detection patterns for better accuracy',
        "  if (model.includes('mac') || model.includes('imac') || model.includes('macbook')) {",
        "    return 'macOS';",
        '  }',
        '  ',
        "  if (model.includes('iphone') || model.includes('ipad')) {",
        "    return 'iOS';",
        '  }',
        '  ',
        "  if (osVersion.includes('windows') || osVersion.includes('10.0') || osVersion.includes('11.0')) {",
        "    return 'Windows';",
        '  }',
        '  ',
        "  if (osVersion.includes('linux') || osVersion.includes('ubuntu') || osVersion.includes('centos') || osVersion.includes('debian')) {",
        "    return 'Linux';",
        '  }',
        '  ',
        "  if (osVersion.includes('android')) {",
        "    return 'Android';",
        '  }',
        '  ',
        '  // Additional iOS patterns based on version numbers',
        '  if (osVersion.match(/^1[6-9]\\./)) { // iOS 16-19',
        "    return 'iOS';",
        '  }',
        '  ',
        '  // Additional macOS patterns based on version numbers',
        '  if (osVersion.match(/^1[3-5]\\./)) { // macOS 13-15',
        "    return 'macOS';",
        '  }',
        '  ',
        "  return 'Unknown';",
        '}',
        '',
        'function filterRelevantPostureChecks(postureArray, currentOS) {',
        '  return postureArray.filter(check => {',
        '    const ruleContent = JSON.stringify(check).toLowerCase();',
        '    ',
        '    // OS detection based on version patterns',
        '    const isWindowsVersion = /10\\.0\\.\\d+|11\\.0\\.\\d+/.test(ruleContent);',
        "    const isMacOSVersion = /1[3-5]\\.\\d+\\.\\d+/.test(ruleContent) && !ruleContent.includes('ios');",
        "    const isIOSVersion = /1[6-9]\\.\\d+\\.\\d+/.test(ruleContent) && (ruleContent.includes('ios') || ruleContent.includes('iphone'));",
        "    const isLinuxVersion = /[5-6]\\.[0-9]+\\.[0-9]+/.test(ruleContent) && ruleContent.includes('kernel');",
        '    ',
        '    // Determine current OS type',
        "    const isWindows = currentOS === 'Windows';",
        "    const isMac = currentOS === 'macOS';",
        "    const isIOS = currentOS === 'iOS';",
        "    const isLinux = currentOS === 'Linux';",
        "    const isAndroid = currentOS === 'Android';",
        '    ',
        '    // Strict OS-specific filtering',
        '    if (isWindows) {',
        "      return ruleContent.includes('windows') || isWindowsVersion;",
        '    }',
        '    ',
        '    if (isMac) {',
        "      return ruleContent.includes('macos') || ruleContent.includes('timemachine') || ",
        "             ruleContent.includes('firewall') || isMacOSVersion ||",
        "             (check.type === 'disk_encryption' && !isIOSVersion && !isWindowsVersion && !isLinuxVersion);",
        '    }',
        '    ',
        '    if (isLinux) {',
        "      return ruleContent.includes('linux') || ruleContent.includes('kernel') || isLinuxVersion;",
        '    }',
        '    ',
        '    if (isIOS) {',
        "      return ruleContent.includes('ios') || isIOSVersion;",
        '    }',
        '    ',
        '    if (isAndroid) {',
        "      return ruleContent.includes('android');",
        '    }',
        '    ',
        "    // For unknown OS, only show rules that don't have specific OS indicators",
        '    return !isIOSVersion && !isMacOSVersion && !isWindowsVersion && !isLinuxVersion &&',
        "           !ruleContent.includes('windows') && !ruleContent.includes('macos') && ",
        "           !ruleContent.includes('linux') && !ruleContent.includes('ios') && !ruleContent.includes('android');",
        '  });',
        '}',
        '',
        'function displayGroupInfo(userData, envData) {',
        "  const groupInfoEl = document.getElementById('group-info');",
        '  const groups = userData?.identity?.groups || [];',
        '  window.allGroups = groups;',
        '  window.targetGroup = envData?.TARGET_GROUP;',
        '',
        '  if (groups.length > 0) {',
        "    let groupHtml = '<h3 style=\"color: #0f172a; margin-bottom: 16px; font-size: 18px; font-weight: 600;\">üë• Group Membership</h3>';",
        "    groupHtml += '<div style=\"display: flex; flex-direction: column; gap: 12px;\">';",
        '',
        '    groups.slice(0, 6).forEach((group, index) => {',
        '      const isTargetGroup = group === window.targetGroup;',
        "      const status = isTargetGroup ? { text: 'Primary Group', color: '#059669', bg: '#d1fae5' } : { text: 'Member', color: '#6b7280', bg: '#f3f4f6' };",
        '      const isLast = index === Math.min(groups.length, 6) - 1 && groups.length <= 6;',
        "      const separator = !isLast ? ' border-bottom: 1px solid #f1f5f9;' : '';",
        "      groupHtml += '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0;' + separator + '\"><span style=\"font-weight: 500; color: #374151;\">' + group + ':</span><span class=\"status-badge\" style=\"background: ' + status.bg + '; color: ' + status.color + '; padding: 2px 8px; border-radius: 4px; font-size: 12px; font-weight: 600;\">' + status.text + '</span></div>';",
        '    });',
        '',
        '    if (groups.length > 6) {',
        "      groupHtml += '<div onclick=\"showGroupModal(); event.stopPropagation();\" style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; cursor: pointer;\"><span style=\"font-weight: 500; color: #6b7280; font-style: italic;\">+' + (groups.length - 6) + ' more groups</span><span class=\"status-badge\" style=\"background: #f3f4f6; color: #6b7280; padding: 2px 8px; border-radius: 4px; font-size: 12px; font-weight: 600;\">...</span></div>';",
        '    }',
        '',
        "    groupHtml += '</div>';",
        '    groupInfoEl.innerHTML = groupHtml;',
        '  } else {',
        "    groupInfoEl.innerHTML = '<h3 style=\"color: #0f172a; margin-bottom: 16px; font-size: 18px; font-weight: 600;\">üë• Group Membership</h3><p style=\"color: #6b7280; font-style: italic;\">No group information available</p>';",
        '  }',
        '}',
        '',
        '// Modal functions',
        'window.showGroupModal = function() {',
        "  const modal = document.getElementById('group-modal');",
        "  const modalGroupList = document.getElementById('modal-group-list');",
        "  modalGroupList.innerHTML = '';",
        '',
        '  window.allGroups.forEach(group => {',
        '    const isTargetGroup = group === window.targetGroup;',
        "    const status = isTargetGroup ? { text: 'Primary Group', color: '#059669', bg: '#d1fae5' } : { text: 'Member', color: '#6b7280', bg: '#f3f4f6' };",
        "    const groupItem = document.createElement('div');",
        "    groupItem.style.cssText = 'display: flex; justify-content: space-between; align-items: center; padding: 12px 0; border-bottom: 1px solid #f1f5f9; font-family: inherit;';",
        '    groupItem.onclick = function() { copyToClipboard(group); };',
        "    groupItem.innerHTML = '<span style=\"font-weight: 500; color: #374151;\">' + group + ':</span><span class=\"status-badge\" style=\"background: ' + status.bg + '; color: ' + status.color + '; padding: 2px 8px; border-radius: 4px; font-size: 12px; font-weight: 600;\">' + status.text + '</span>';",
        '    modalGroupList.appendChild(groupItem);',
        '  });',
        '',
        "  modal.style.display = 'flex';",
        '};',
        '',
        'window.closeGroupModal = function() {',
        "  const modal = document.getElementById('group-modal');",
        "  modal.style.display = 'none';",
        '};',
        '',
        '// Compliance Modal functions',
        'window.showComplianceModal = function() {',
        "  const modal = document.getElementById('compliance-modal');",
        "  const modalComplianceList = document.getElementById('modal-compliance-list');",
        "  modalComplianceList.innerHTML = '';",
        '',
        '  window.allComplianceChecks.forEach(rule => {',
        "    const status = rule.success ? { text: 'Compliant', color: '#059669', bg: '#d1fae5' } : { text: 'Non-compliant', color: '#dc2626', bg: '#fee2e2' };",
        '    ',
        '    // Create descriptive names based on available data (same logic as in displayPostureInfo)',
        "    let displayName = rule.rule_name || rule.name || (rule.type ? rule.type.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()) : 'Unknown Check');",
        "    let requirement = '';",
        '    ',
        '    if (rule.input) {',
        '      if (rule.input.min_value) {',
        "        requirement = ' (>= ' + rule.input.min_value + ')';",
        '      } else if (rule.input.max_value) {',
        "        requirement = ' (<= ' + rule.input.max_value + ')';",
        '      } else if (rule.input.version) {',
        "        requirement = ' (' + rule.input.version + ')';",
        '      }',
        '    }',
        '    ',
        '    // Handle different rule types with better naming',
        "    if (rule.type === 'os_version') {",
        '      if (!rule.rule_name && rule.input && rule.input.version) {',
        "        if (rule.input.version.includes('18.4.1')) {",
        "          displayName = 'Latest version of iOS';",
        "        } else if (rule.input.version.includes('6.8.0')) {",
        "          displayName = 'Latest version of Linux Kernel';",
        "        } else if (rule.input.version.includes('10.0.26100')) {",
        "          displayName = 'Latest version of Windows';",
        "        } else if (rule.input.version.includes('15.6.1')) {",
        "          displayName = 'macOS Version Rule';",
        '        }',
        '      }',
        "    } else if (rule.type === 'disk_encryption') {",
        "      displayName = rule.rule_name || 'Disk Encryption macOS';",
        "    } else if (rule.type === 'application') {",
        "      displayName = rule.rule_name || 'Application Check';",
        "    } else if (rule.type === 'firewall') {",
        "      displayName = rule.rule_name || 'Firewall rule macOS';",
        '    }',
        '    ',
        '    const fullDisplayName = displayName + requirement;',
        "    const complianceItem = document.createElement('div');",
        "    complianceItem.style.cssText = 'display: flex; justify-content: space-between; align-items: center; padding: 12px 0; border-bottom: 1px solid #f1f5f9; font-family: inherit;';",
        "    complianceItem.onclick = function() { copyToClipboard(fullDisplayName + ': ' + status.text); };",
        "    complianceItem.innerHTML = '<span style=\"font-weight: 500; color: #374151;\">' + fullDisplayName + ':</span><span class=\"status-badge\" style=\"background: ' + status.bg + '; color: ' + status.color + '; padding: 2px 8px; border-radius: 4px; font-size: 12px; font-weight: 600;\">' + status.text + '</span>';",
        '    modalComplianceList.appendChild(complianceItem);',
        '  });',
        '',
        "  modal.style.display = 'flex';",
        '};',
        '',
        'window.closeComplianceModal = function() {',
        "  const modal = document.getElementById('compliance-modal');",
        "  modal.style.display = 'none';",
        '};',
        '',
        '// Copy to clipboard functionality',
        'window.copyToClipboard = function(text) {',
        '  if (navigator.clipboard && window.isSecureContext) {',
        '    navigator.clipboard.writeText(text).then(() => {',
        '      // No notification - S-Tier tooltip handles feedback',
        '    }).catch(err => {',
        '      // Copy failed',
        '    });',
        '  } else {',
        '    // Fallback for older browsers',
        "    const textArea = document.createElement('textarea');",
        '    textArea.value = text;',
        '    document.body.appendChild(textArea);',
        '    textArea.focus();',
        '    textArea.select();',
        '    try {',
        "      document.execCommand('copy');",
        '      // No notification - S-Tier tooltip handles feedback',
        '    } catch (err) {',
        '      // Copy failed',
        '    }',
        '    document.body.removeChild(textArea);',
        '  }',
        '};',
        '',
        '// Show notification function',
        'window.showNotification = function(message) {',
        "  const notification = document.createElement('div');",
        "  notification.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #059669; color: white; padding: 12px 20px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.2); z-index: 10000; font-size: 14px; font-weight: 500;';",
        '  notification.textContent = message;',
        '  document.body.appendChild(notification);',
        '  setTimeout(() => {',
        '    if (notification.parentNode) {',
        '      document.body.removeChild(notification);',
        '    }',
        '  }, 3000);',
        '};',
        '',
        '// Copy functions for tiles',
        'window.copyUserInfo = function() {',
        '  const identity = window.userData?.identity;',
        '  const envData = window.envData || {};',
        "  let username = identity?.custom?.username || identity?.preferred_username || identity?.username || identity?.sub || identity?.email || 'Not available';",
        '  ',
        '  // Enhanced IDP display logic for copy',
        "  let idpUsed = 'Not available';",
        '  if (identity?.idp) {',
        "    const idpType = identity.idp.type || '';",
        '    const cachedIdpDetails = window.idpDetails;',
        '    ',
        '    if (cachedIdpDetails && cachedIdpDetails.name) {',
        '      idpUsed = idpType ? `${cachedIdpDetails.name} - ${idpType.toUpperCase()}` : cachedIdpDetails.name;',
        '    } else if (idpType) {',
        '      idpUsed = idpType.toUpperCase();',
        '    }',
        '  }',
        '  ',
        "  const content = 'User Information:\\nName: ' + (identity?.name || 'Not available') + '\\nEmail: ' + (identity?.email || 'Not available') + '\\nUsername: ' + username + '\\nIDP Used: ' + idpUsed + '\\nOrganization: ' + (envData.ORGANIZATION_NAME || 'Not available');",
        '  copyToClipboard(content);',
        '};',
        '',
        'window.copyDeviceInfo = function() {',
        '  const device = window.userData?.device?.result;',
        "  const osDisplayName = window.detectCurrentOS ? window.detectCurrentOS(window.userData) : 'Not available';",
        "  const content = 'Device Information:\\nModel: ' + (device?.model || 'Not available') + '\\nName: ' + (device?.name || 'Not available') + '\\nOS: ' + osDisplayName + '\\nVersion: ' + (device?.os_version || 'Not available');",
        '  copyToClipboard(content);',
        '};',
        '',
        'window.copyWarpInfo = function() {',
        '  const identity = window.userData?.identity;',
        "  const warpStatus = identity?.is_warp ? 'Connected' : 'Disconnected';",
        "  const gatewayStatus = identity?.is_gateway ? 'Active' : 'Inactive';",
        "  const content = 'WARP Status:\\nConnection: ' + warpStatus + '\\nGateway: ' + gatewayStatus;",
        '  copyToClipboard(content);',
        '};',
        '',
        'window.copyNetworkInfo = function() {',
        '  const networkData = window.networkData || {};',
        "  const location = (networkData.city && networkData.country) ? networkData.city + ', ' + networkData.country : 'Not available';",
        "  const content = 'Network Information:\\nIP Address: ' + (networkData.ip || 'Not available') + '\\nLocation: ' + location + '\\nISP: ' + (networkData.isp || 'Not available') + '\\nBrowser: ' + (networkData.browser || 'Not available') + '\\nEdge Location: ' + (networkData.edgeLocation || 'Not available');",
        '  copyToClipboard(content);',
        '};',
        '',
        '// Event listeners for modals',
        "document.addEventListener('click', function(event) {",
        "  const groupModal = document.getElementById('group-modal');",
        "  const complianceModal = document.getElementById('compliance-modal');",
        '  ',
        '  if (event.target === groupModal) {',
        '    closeGroupModal();',
        '  }',
        '  ',
        '  if (event.target === complianceModal) {',
        '    closeComplianceModal();',
        '  }',
        '});',
        '',
        "document.addEventListener('keydown', function(event) {",
        "  if (event.key === 'Escape') {",
        "    const groupModal = document.getElementById('group-modal');",
        "    const complianceModal = document.getElementById('compliance-modal');",
        '    ',
        "    if (groupModal && groupModal.style.display === 'flex') {",
        '      closeGroupModal();',
        '    }',
        '    ',
        "    if (complianceModal && complianceModal.style.display === 'flex') {",
        '      closeComplianceModal();',
        '    }',
        '  }',
        '});',
        '',
        '// Initialize the page',
        "if (document.readyState === 'loading') {",
        "  document.addEventListener('DOMContentLoaded', () => {",
        '    createAccessDeniedPage();',
        '    loadUserData();',
        '  });',
        '} else {',
        '  createAccessDeniedPage();',
        '  loadUserData();',
        '}'
    ].join('\n');
}
//# sourceMappingURL=access-denied.js.map